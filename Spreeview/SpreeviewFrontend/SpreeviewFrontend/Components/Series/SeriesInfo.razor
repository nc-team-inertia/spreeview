@inject NavigationManager Navigation

@using CommonLibrary.DataClasses.SeriesModel
@using SpreeviewFrontend.Components.Episode
@using SpreeviewFrontend.Components.Season
@using SpreeviewFrontend.Components.Reviews
@rendermode InteractiveServer

<div class="flex gap-10 px-20 py-12">
	<!--Bio section-->
	<section class="flex-[2.5]">
		<!--Banner section-->
		<section class="h-[400px] overflow-hidden relative pb-6">
			<img src=@($"https://image.tmdb.org/t/p/original{series.BannerPath}") width="100%" class="absolute" />
		</section>
		<section class="px-4 flex gap-6">
			<div class="flex-[2.5]">
				<!--Information section-->
				<article class="pt-6 pb-2">
					<div class="flex gap-2 items-end">
						<h2 class="text-3xl">@series.Name</h2>
						<h3>@series.ReleaseDate  Directed by <span class="text-purple-700">Director Name</span></h3>
					</div>
					<p class="mt-4">
						@series.Overview
					</p>
				</article>
				<!-- Seasons section -->
				@if (DisplaySeason == true && SeasonNumber >= 0)
				{
					<SeasonLoader LoadingType="@LoadingType.SeasonInfo" seriesId="@series.Id" SelectEpisode="SelectEpisode" />
				}

			</div>

			<!--Seasons cards section-->
			<section class="relative flex flex-col gap-2 max-h-[400px] flex-[1] overflow-hidden flex-[1]">

				<section class="flex mt-10 flex-col gap-[10px] items-center overflow-y-scroll">
					@for (var i = 0; i < series.Seasons.Count; i++)
					{
						var seasonIndex = i; // Capture i in a new variable
						var seasonNumber = @series.Seasons[seasonIndex].SeasonNumber;
						<button class="w-4/5 h-[150px] flex justify-center items-center light-bg-secondary text-white shrink-0 click-transition" @onclick="() => SetSeason(seasonNumber)">
							@* <img src=@($"https://image.tmdb.org/t/p/original{series.Seasons[i-1].PosterPath}") /> *@
							@* Season @seasonNumber *@
							@series.Seasons[seasonIndex].SeasonName
						</button>
					}
				</section>

				@* 		<button @onclick="Previous" class="absolute top-0 left-0 w-full text-black bg-purple-500 h-10 bg-opacity-25 flex justify-center items-center click-transition">
				<svg clip-rule="evenodd" fill-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="h-20">
				<path d="m16.843 13.789c.108.141.157.3.157.456 0 .389-.306.755-.749.755h-8.501c-.445 0-.75-.367-.75-.755 0-.157.05-.316.159-.457 1.203-1.554 3.252-4.199 4.258-5.498.142-.184.36-.29.592-.29.23 0 .449.107.591.291 1.002 1.299 3.044 3.945 4.243 5.498z" />
				</svg>
				</button>

				<button @onclick="Next" class="absolute bottom-0 left-0 w-full text-black bg-purple-500 h-10 bg-opacity-25 flex justify-center items-center click-transition">
				<svg clip-rule="evenodd" fill-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="h-20">
				<path d="m16.843 10.211c.108-.141.157-.3.157-.456 0-.389-.306-.755-.749-.755h-8.501c-.445 0-.75.367-.75.755 0 .157.05.316.159.457 1.203 1.554 3.252 4.199 4.258 5.498.142.184.36.29.592.29.23 0 .449-.107.591-.291 1.002-1.299 3.044-3.945 4.243-5.498z" />
				</svg>
				</button> *@
			</section>
		</section>
	</section>
</div>

@if (DisplayPopup == true)
{
	<WriteReviewPopup series="@series" TogglePopup="TogglePopup" seasonNumber="@SeasonNumber" episodeNumber="@EpisodeNumber" episodeId="@EpisodeId" />
}

@if (DisplayEpisode == true)
{
	<div class="flex justify-center items-center mt-8">
		<!-- Popup Version -->
		<AuthorizeView>
			<Authorized>
				<button class="bg-purple-600 rounded-lg text-white flex gap-2 py-4 px-6" @onclick="TogglePopup">
					<span>Write a Review</span>
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-pen" viewBox="0 0 16 16">
						<path d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
					</svg>
				</button>
			</Authorized>
			<NotAuthorized>
				<a href="/login">
					<button class="button-purple form-button">Login to review</button>
				</a>
			</NotAuthorized>
		</AuthorizeView>
	</div>
	<EpisodeLoader seriesId="@series.Id" />
}


@code {
	private string GetSeasonUrl() => $"/series/{series.Id}?season={SeasonNumber}";

	public bool DisplayEpisode { get; set; } = false;

	[Parameter]
	public SeriesGetDTO series { get; set; }

	public bool DisplaySeason { get; set; } = false;

	public int SeasonNumber { get; set; } = 1;

	public void SetSeason(int i)
	{
		DisplaySeason = true;
		SeasonNumber = i;
		StateHasChanged();
		Navigation.NavigateTo(GetSeasonUrl());
	}

	public bool DisplayPopup { get; set; } = false;

	public void TogglePopup()
	{
		Console.WriteLine("Toggle Triggered");
		DisplayPopup = !DisplayPopup;
		StateHasChanged();
	}

	public int EpisodeId { get; set; }

	public int EpisodeNumber { get; set; }

	public void SelectEpisode((int Id, int number) episode)
	{
		EpisodeId = episode.Id;
		EpisodeNumber = episode.number;
		DisplayEpisode = true;
	}

	private int currentIndex = 0;

	private void Previous()
	{
		currentIndex = (currentIndex == 0) ? series.Seasons.Count - 1 : currentIndex - 1;
	}

	private void Next()
	{
		currentIndex = (currentIndex == series.Seasons.Count - 1) ? 0 : currentIndex + 1;
	}
}
